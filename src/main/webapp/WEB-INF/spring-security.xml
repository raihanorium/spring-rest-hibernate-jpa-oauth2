<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security-4.0.xsd
           http://www.springframework.org/schema/security/oauth2
           http://www.springframework.org/schema/security/spring-security-oauth2.xsd">

    <!--enable swagger documentation-->
    <http pattern="/swagger-ui.html" security="none"/>
    <http pattern="/webjars/**" security="none"/>
    <http pattern="/configuration/**" security="none"/>
    <http pattern="/images/**" security="none"/>
    <http pattern="/swagger-resources/**" security="none"/>
    <http pattern="/v2/api-docs/**" security="none"/>

    <!-- This is default url to get a token from OAuth -->
    <http pattern="/oauth/token" create-session="stateless" use-expressions="true"
          authentication-manager-ref="clientAuthenticationManager">

        <intercept-url pattern="/oauth/token" access="isFullyAuthenticated()" />
        <anonymous enabled="false" />
        <http-basic entry-point-ref="clientAuthenticationEntryPoint" />
        <custom-filter ref="clientCredentialsTokenEndpointFilter" after="BASIC_AUTH_FILTER" />
        <csrf disabled="true" />
    </http>

    <!-- Application security -->
    <http pattern="/**" create-session="never"
            entry-point-ref="oauthAuthenticationEntryPoint"
            access-decision-manager-ref="accessDecisionManager">

        <intercept-url pattern="/**" access="permitAll" method="OPTIONS" />
        <intercept-url pattern="/**" access="isAuthenticated()" />
        <!--<intercept-url pattern="/user*" access="hasAnyRole('ROLE_ADMIN')"/>-->
        <anonymous enabled="false" />
        <custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
        <csrf disabled="true" />

    </http>

    <beans:bean id="oauthAuthenticationEntryPoint"
          class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <beans:property name="realmName" value="test" />
    </beans:bean>

    <beans:bean id="clientAuthenticationEntryPoint"
          class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <beans:property name="realmName" value="test/client" />
        <beans:property name="typeName" value="Basic" />
    </beans:bean>

    <beans:bean id="oauthAccessDeniedHandler"
          class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

    <beans:bean id="clientCredentialsTokenEndpointFilter"
          class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
        <beans:property name="authenticationManager" ref="clientAuthenticationManager" />
    </beans:bean>

    <beans:bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased">
        <beans:constructor-arg>
            <beans:list>
                <beans:bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
                <beans:bean class="org.springframework.security.access.vote.RoleVoter" />
                <beans:bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
                <beans:bean class="org.springframework.security.web.access.expression.WebExpressionVoter" />
            </beans:list>
        </beans:constructor-arg>
    </beans:bean>

    <authentication-manager id="clientAuthenticationManager">
        <authentication-provider user-service-ref="clientDetailsUserService" />
    </authentication-manager>

    <authentication-manager>
        <authentication-provider>
            <user-service>
                <user name="${api.oauth2.username}" password="${api.oauth2.password}" authorities="ROLE_ADMIN"/>
            </user-service>
        </authentication-provider>
    </authentication-manager>

    <beans:bean id="clientDetailsUserService"
          class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
        <beans:constructor-arg ref="clientDetails" />
    </beans:bean>

    <!-- This defined token store, we have used inmemory tokenstore for now
		but this can be changed to a user defined one -->
    <beans:bean id="tokenStore"
          class="org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore" />

    <beans:bean id="approvalStore" class="org.springframework.security.oauth2.provider.approval.TokenApprovalStore">
        <beans:property name="tokenStore" ref="tokenStore"/>
    </beans:bean>

    <!-- This is where we defined token based configurations, token validity
        and other things -->
    <beans:bean id="tokenServices"
          class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
        <beans:property name="tokenStore" ref="tokenStore" />
        <beans:property name="supportRefreshToken" value="true" />
        <beans:property name="accessTokenValiditySeconds" value="${access.token.expires.in.seconds}" />
        <beans:property name="clientDetailsService" ref="clientDetails" />
    </beans:bean>

    <beans:bean id="userApprovalHandler"
          class="org.springframework.security.oauth2.provider.approval.ApprovalStoreUserApprovalHandler">
        <beans:property name="approvalStore" ref="approvalStore"/>
        <beans:property name="clientDetailsService" ref="clientDetails"/>
        <beans:property name="requestFactory">
            <beans:bean class="org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory">
                <beans:constructor-arg index="0" ref="clientDetails"/>
            </beans:bean>
        </beans:property>
    </beans:bean>

    <oauth:authorization-server
            client-details-service-ref="clientDetails" token-services-ref="tokenServices"
            user-approval-handler-ref="userApprovalHandler">
        <oauth:authorization-code />
        <oauth:implicit />
        <oauth:refresh-token />
        <oauth:client-credentials />
        <oauth:password />
    </oauth:authorization-server>

    <oauth:resource-server id="resourceServerFilter"
                           resource-id="test" token-services-ref="tokenServices" />

    <oauth:client-details-service id="clientDetails">
        <!-- client -->
        <oauth:client client-id="restapp"
                      authorized-grant-types="authorization_code,client_credentials"
                      authorities="ROLE_ADMIN" scope="read,write,trust" secret="secret" />

        <!--This is the user of the rest service-->
        <oauth:client client-id="${api.oauth2.client.android.id}"
                      authorized-grant-types="password,authorization_code,refresh_token,implicit"
                      secret="${api.oauth2.client.android.secret}" authorities="ROLE_ADMIN"
                      scope="read,write,trust"/>
        <oauth:client client-id="${api.oauth2.client.web.id}"
                      authorized-grant-types="password,authorization_code,refresh_token,implicit"
                      secret="${api.oauth2.client.web.secret}" authorities="ROLE_ADMIN"
                      scope="read,write,trust"/>

    </oauth:client-details-service>

    <global-method-security
            pre-post-annotations="enabled" proxy-target-class="true">
        <!--We could also wire in the expression handler up at the layer of the
            http filters. See https://jira.springsource.org/browse/SEC-1452 -->
        <expression-handler ref="oauthExpressionHandler" />
    </global-method-security>

    <oauth:expression-handler id="oauthExpressionHandler" />
    <oauth:web-expression-handler id="oauthWebExpressionHandler" />
</beans:beans>